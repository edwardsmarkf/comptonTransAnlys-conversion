========  2022-02-02

//       node  clientStimword.js  '{"clientSessionAutoIncr" : 12345, "stimwordPositionAutoIncr" : 1, "clientContextError_OLD" :"abc", "clientContextError_NEW" : "def", "clientStimwordNotes" : "my client stimword notes"}'

console.log(process.argv)       ;

                                                                                                                /*
                                                                                                                const myArgs = process.argv.slice(2);
                                                                                                                console.log('myArgs: ', myArgs);

                                                                                                                console.log('start:');
                                                                                                                console.log(myArgs[0].clientSessionAutoIncr);
                                                                                                                console.log(myArgs[0].clientPositionAutoIncr);
                                                                                                                console.log(JSON.parse(myArgs[0]));
                                                                                                                */
var     myArgs                          = JSON.parse(process.argv.slice(2)[0])  ;
const   parmClientSessionAutoIncr       = myArgs.clientSessionAutoIncr          ;
const   parmStimwordPositionAutoIncr    = myArgs.stimwordPositionAutoIncr       ;
const   parmClientContextError_OLD      = myArgs.clientContextError_OLD         ;
const   parmClientContextError_NEW      = myArgs.clientContextError_NEW         ;
const   parmClientStimwordNotes         = myArgs.clientStimwordNotes            ;

                                                                                                                console.log(
                                                                                                                        parmClientSessionAutoIncr
                                                                                                                ,       parmStimwordPositionAutoIncr
                                                                                                                ,       parmClientContextError_OLD
                                                                                                                ,       parmClientContextError_NEW
                                                                                                                ,       parmClientStimwordNotes
                                                                                                                );
const knexConnectOptions = {
  client: 'mysql',
  debug: false,
  connection: 'mysql://knexUser:knexPassword@localhost:3306/comptonTransAnlys'
};

const knex = require('knex')(knexConnectOptions);

                                //      https://javascript.info/promise-basics
                                //      https://stackoverflow.com/questions/35318442/how-to-pass-parameter-to-a-promise-function

                                                                /*
                                                                const firstPromise = ( promiseInput )   =>      {
                                                                        return new Promise((resolve, reject) => {
                                                                                console.log('parameter passed into promise: ' + promiseInput);

                                                                                knex.raw("SELECT VERSION()")
                                                                                .then(
                                                                                    (version) => {      console.log     ('inside:  ' + version[0][0]["VERSION()"] );
                                                                                                        resolve         ('outside: ' + version[0][0]["VERSION()"] );
                                                                                                }
                                                                                ).catch(
                                                                                        (err) => { reject(err); }
                                                                                )
                                                                        })
                                                                }

                                                                const secondPromise = ( input ) =>              {
                                                                        return new Promise (    (resolve, reject) => {
                                                                                resolve (input) ;
                                                                        })
                                                                }
                                                                */

function firstPromise(promiseInput)     {
        console.log('parameter passed into first promise: ' + promiseInput);
        return  knex.raw("SELECT VERSION()")    ;
}
function secondPromise(promiseInput)    {
        console.log('result of first promise into second promise: ' + JSON.stringify(promiseInput));
        return ('second promise added to promiseInput. ' + promiseInput);
}

console.log('Starting run.');

if  ( parmClientContextError_NEW != ''  )       {
        console.log ('not blank!');

} else {
        console.log ('is blank!');
}

firstPromise('promise input!')
        .then(secondPromise)
        .catch(console.log('error!'))
        ;



/*
firstPromise('promise input!')
        .then(  (response)      =>      {       console.log     ('response from firstPromise: ' + response)     ;
                                                return response                                                 ;
                                        }                                                                               )
        .then(  (newResponse)   =>      console.log     ('ending! ' + newResponse)                                      )
        .then(  ()              =>      knex.destroy()                                                                  )
        .then(  ()              =>      secondPromise('stuff into second promise')
                                                .then((result) => { console.log('calling second promise: ' + result); return (result);} )       )
        .then(  (lastResponse)  =>      console.log     ('last response: ' + lastResponse)                              )
        .catch( (error)         =>      console.log     ('error! ' + error)                                             )
        ;

*/



/*
    if  ( NEW != <blank> )      {
        if  ( clientContext(NEW) NOT exists )   {
            GET contextAutoIncr using stimwordPosition(clientContextAutoIncr)
            INSERT clientContext(NEW)
        }
        if  ( OLD == <blank> ) {
            INSERT clientStimword(NEW)
        } else {
            MODIFY clientStimword(OLD) to clientStimword(NEW)
        }
    } else {
        DELETE clientStimword(OLD)
        if      (       clientContext.clientContextErrorNotes(OLD)      blank?
                &&      clientContext.clientContextFrequency            blank?
                &&      clientContext.clientContextErrorSpeakingCount   zero?
                &&      clientContext(OLD) [clientStimword]             childless?
                )
        {
            DELETE clientContext(OLD)
        }
    }

*/

//      mariadb  --host=localhost --user=knexUser  --password=knexPassword    knexDb    ;
//      mariadb  --host=localhost --user=kenxUser  --password=knexPassword    comptonTransAnlys



=========== 2022-01-28 ===============

//      mariadb  --host=localhost --user=knexUser  --password=knexPassword    knexDb    ;
//      mariadb  --host=localhost --user=kenxUser  --password=knexPassword    comptonTransAnlys

const knexConnectOptions = {
  client: 'mysql',
  debug: false,
  connection: 'mysql://knexUser:knexPassword@localhost:3306/comptonTransAnlys'
};

const knex = require('knex')(knexConnectOptions);

                                //      https://javascript.info/promise-basics
                                //      https://stackoverflow.com/questions/35318442/how-to-pass-parameter-to-a-promise-function
const firstPromise = ( promiseInput )   =>      {
        return new Promise((resolve, reject) => {
                console.log('parameter passed into promise: ' + promiseInput);

                knex.raw("SELECT VERSION()")
                .then(
                    (version) => {      console.log     ('inside:  ' + version[0][0]["VERSION()"] );
                                        resolve         ('outside: ' + version[0][0]["VERSION()"] );
                                }
                ).catch(
                        (err) => { reject(err); }
                )
        })
}

const secondPromise = ( input ) =>              {
        return new Promise (    (resolve, reject) => {
                resolve (input) ;
        })
}


console.log('Starting run.');

firstPromise('promise input!')
        .then(  (response)      =>      {       console.log     ('response from firstPromise: ' + response)     ;
                                                return response                                                 ;
                                        }                                                                               )
        .then(  (newResponse)   =>      console.log     ('ending! ' + newResponse)                                      )
        .then(  ()              =>      knex.destroy()                                                                  )
        .then(  ()              =>      secondPromise('stuff into second promise')
                                                .then((result) => { console.log('calling second promise: ' + result); return (result);} )       )
        .then(  (lastResponse)  =>      console.log     ('last response: ' + lastResponse)                              )
        .catch( (error)         =>      console.log     ('error! ' + error)                                             )
        ;

~


=========== 2022-01-26  ===============

                

const knexConnectOptions = {
  client: 'mysql',
  debug: false,
  connection: 'mysql://knexUser:knexPassword@localhost:3306/comptonTransAnlys'
};

const knex = require('knex')(knexConnectOptions);

                                //      https://javascript.info/promise-basics
                                //      https://stackoverflow.com/questions/35318442/how-to-pass-parameter-to-a-promise-function

const marksPromise = ( promiseInput )   =>      {
        return new Promise((resolve, reject) => {
                console.log('parameter passed into promise: ' + promiseInput);

                knex.raw("SELECT VERSION()")
                .then(
                    (version) => {      console.log     ('inside:  ' + version[0][0]["VERSION()"] );
                                        resolve         ('outside: ' + version[0][0]["VERSION()"] );
                                }
                ).catch(
                        (err) => { reject(err); }
                )
                                                                                //.finally(() => {
                                                                                //knex.destroy();
                                                                                //})
        })
}

console.log('starting;');

marksPromise('promise input!')
        .then(  ()              => console.log  ('starting!')                                   )
        .then(  (response)      => console.log  ('response from marksPromise: ' + response)     )
        .then(  ()              => console.log  ('ending!')                                     )
        ;



=========== 2021-01-21  ===============

2022-01-21:


//       node  select.js  '{"parmOne":"/gvalueOne","parmTwo":"valueTwo","parmThree":"valueThree"}'

console.log(process.argv)       ;

const myArgs = process.argv.slice(2);
console.log('myArgs: ', myArgs);

console.log('start:');
console.log(JSON.parse(myArgs[0]));
console.log('end:');


const knexConnectOptions = {
  client: 'mysql',
  debug: true,
  connection: 'mysql://knexUser:knexPassword@localhost:3306/comptonTransAnlys'
};

const knex = require('knex')(knexConnectOptions);

knex.from('clientContext')
        .select (       'layoutName'                            /* fixed        */
                ,       'teacherEmail'                          /* fixed        */
                ,       'clientMasterEmail'                     /* fixed        */
                ,       'sessionName'                           /* fixed        */
                ,       'soundPhoneme'                          /* fixed        */
                ,       'contextPosition'                       /* fixed        */
                ,       'clientContextError'                    /* VARIABLE     */
                ,       'clientContextErrorSpeakingCount'       /* variable     */
                ,       'frequency'                             /* variable     */
                ,       'clientContextErrorNotes'               /* variable     */
                ,       'createdAt'                             /* do not touch */
                ,       'updatedAt'                             /* do not touch */
                ,       'contextAutoIncr'                       /* fixed        */
                ,       'clientSessionAutoIncr'                 /* fixed        */
                ,       'clientContextAutoIncr'                 /* do not touch */
                )
        .where('clientContextAutoIncr', '=', '688')
    .then((rows) => {
        for (row of rows) {
                console.log(JSON.stringify(row));
            //console.log(`${row['clientMasterEmail']} ${row['clientContextError']}`);
        }
    })
    .catch((err) => { console.log( err); throw err })
    .finally(() => {
        //knex.destroy();
        //process.exit();
    });


knex.from('clientStimword')
        .select (       'layoutName'                            /* fixed        */
                ,       'teacherEmail'                          /* fixed        */
                ,       'clientMasterEmail'                     /* fixed        */
                ,       'sessionName'                           /* fixed        */
                ,       'soundPhoneme'                          /* fixed        */
                ,       'contextPosition'                       /* fixed        */
                ,       'clientContextError'                    /* fixed        */
                ,       'stimwordPageNbr'                       /* fixed        */
                ,       'stimwordLineNbr'                       /* fixed        */
                ,       'stimwordWord'                          /* fixed        */
                ,       'stimwordPositionNbr'                   /* fixed        */
                ,       'stimwordPositionSetting'               /* fixed        */
                ,       'clientStimwordNotes'                   /* VARIABLE     */
                ,       'createdAt'                             /* do not touch */
                ,       'updatedAt'                             /* do not touch */
                ,       'stimwordPositionAutoIncr'              /* fixed        */
                ,       'clientContextAutoIncr'                 /* fixed        */
                ,       'clientStimwordAutoIncr'                /* do not touch */
                )
        .where('clientContextAutoIncr', '=', '688')
    .then((rows) => {
        for (row of rows) {
                console.log(JSON.stringify(row));
            //console.log(`${row['clientMasterEmail']} ${row['clientContextError']}`);
        }
    })
    .catch((err) => { console.log( err); throw err })
    .finally(() => {
        //knex.destroy();
        process.exit();
    });



/*
                // clientSessionAutoIncr provided along with email, session name, etc

        {clientSessionAutoIncr:#####, stimwordPositionAutoIncr:####, clientContextError_OLD:'', clientContextError_NEW:'0'}

        if  ( clientContextError_NEW != <blank> )       {

                if  ( clientContext(clientSessionAutoIncr, clientContextError_NEW) NOT exists ) {

                        SELECT  `context`.`soundPhoneme`                        'soundPhoneme'
                        ,       `context`.`contextPosition`                     'contextPosition'
                        ,       `context`.`contextAutoIncr`                     'contextAutoIncr'
                        FROM    `context`
                        ,       `stimwordPosition`
                        WHERE   1
                        AND     `context`.`contextAutoIncr`                             =       `stimwordPosition`.`contextAutoIncr`
                        AND     `context`.`contextPosition`                             =       `stimwordPosition`.`contextPosition`
                        AND     `stimwordPosition`.`stimwordPositionAutoIncr`           =       stimwordPositionAutoIncr
                        ;

                        SELECT  `clientSession`.`layoutName`            'layoutName'
                        ,       `clientSession`.`teacherEmail`          'teacherEmail'
                        ,       `clientSession`.`clientMasterEmail`     'clientMasterEmail'
                        ,       'clientSession`'`sessionName`           'sessionName'
                        FROM    `clientSession`
                        WHERE   1
                        AND     `clientSession`.`clientSessionAutoIncr`                         =       clientSessionAutoIncr
                        ;

                        INSERT  INTO `clientContext`
                                SET     `clientContext`.`layoutName`                            =       layoutName
                                ,       `clientContext`.`teacherEmail`                          =       teacherEmail
                                ,       `clientContext`.`clientMasterEmail`                     =       clientMasterEmail
                                ,       `clientContext`.`sessionName`                           =       sessionName
                                ,       `clientContext`.`soundPhoneme`                          =       soundPhoneme
                                ,       `clientContext`.`contextPosition`                       =       contextPosition
                                ,       `clientContext`.`clientContextError`                    =       clientContextError_NEW
                                ,       `clientContext`.`clientContextErrorSpeakingCount`       =       0
                                ,       `clientContext`.`frequency`                             =       <blank>
                                ,       `clientContext`.`clientContextErrorNotes`               =       <blank>
                                ,       `clientContext`.`contextAutoIncr`                       =       contextAutoIncr
                                ,       `clientContext`.`clientSessionAutoIncr`                 =       clientSessionAutoIncr
                        <returning>  'clientContextAutoIncr'
                                ;

                } else {
                        SELECT  `clientContext`.`clientContextAutoIncr`
                        FROM    `clientContext`
                        WHERE   1
                        AND     `clientContext`.`clientSessionAutoIncr`                         =       clientSessionAutoIncr
                        AND     `clientContext`.`clientContextError`                            =       clientContextError_NEW
                        ;
                }

                if  ( clientContextError_OLD == <blank> ) {
                        INSERT  clientStimword(stimwordPositionAutoIncr, clientContextAutoIncr, clientContextError_NEW)
                } else {
                        UPDATE  `clientStimword`
                        SET     `clientStimword`.`clientContextError`                           =       clientContextError_NEW
                        WHERE   1
                        AND     `clientStimword`.`clientContextAutoIncr`                        =       clientContextAutoIncr
                        AND     `clientStimword`.`stimwordPositionAutoIncr`                     =       stimwordPositionAutoIncr
                        AND     `clientStimword`.`clientCOntextError`                           =       clientContextError_OLD
                        ;
                }

        } else {
                SELECT  clientContextAutoIncr
                FROM    clientContext
                WHERE   1
                AND     clientContext.clientSessionAutoIncr             =       clientSessionAutoIncr
                AND     clientContext.clientContextError                =       clientContextError_OLD
                ;

                DELETE  clientStimword
                WHERE   1
                AND     clientStimword.clientContextAutoIncr    =       clientContextAutoIncr
                AND     clientStimword.clientContextErrors      =       clientContextError_OLD
                ;

                SELECT COUNT(*) FROM clientStimword WHERE 1 AND clientContextAutoIncr = clientContextAutoIncr           <returning>  count

                IF  ( count == 0 )      {
                        DELETE FROM clientContext
                        WHERE   1
                        AND     clientContext.clientContextAutoIncr             =       clientContextAutoIncr
                        AND     clientContext.clientContextErrorSpeakingCount   >       0
                        AND     clientContext.frequency                         <       <blank>
                        AND     clientContext.clientContextErrorNotes           >       <blank>
                        ;
                }
        }


*/

/*
    if  ( NEW != <blank> )      {
        if  ( clientContext(NEW) NOT exists )   {
            INSERT clientContext(NEW)
        }
        if  ( OLD == <blank> ) {
            INSERT clientStimword(NEW)
        } else {
            MODIFY clientStimword(OLD) to clientStimword(NEW)
        }
    } else {
        DELETE clientStimword(OLD)
        if      (       clientContext(OLD) have blank notes
                &&      clientContext(OLD) childless?
                )
        {
            DELETE clientContext(OLD)
        }
    }
*/



2022-01-19:


//       node  select.js  '{"parmOne":"/gvalueOne","parmTwo":"valueTwo","parmThree":"valueThree"}'

console.log(process.argv)       ;

const myArgs = process.argv.slice(2);
console.log('myArgs: ', myArgs);

console.log('start:');
console.log(JSON.parse(myArgs[0]));
console.log('end:');


const knexConnectOptions = {
  client: 'mysql',
  debug: true,
  connection: 'mysql://knexUser:knexPassword@localhost:3306/comptonTransAnlys'
};

const knex = require('knex')(knexConnectOptions);

knex.from('clientContext')
        .select (       'layoutName'                            /* fixed        */
                ,       'teacherEmail'                          /* fixed        */
                ,       'clientMasterEmail'                     /* fixed        */
                ,       'sessionName'                           /* fixed        */
                ,       'soundPhoneme'                          /* fixed        */
                ,       'contextPosition'                       /* fixed        */
                ,       'clientContextError'                    /* variable     */
                ,       'clientContextErrorSpeakingCount'       /* variable     */
                ,       'frequency'                             /* variable     */
                ,       'clientContextErrorNotes'               /* variable     */
                ,       'createdAt'                             /* do not touch */
                ,       'updatedAt'                             /* do not touch */
                ,       'contextAutoIncr'                       /* fixed        */
                ,       'clientSessionAutoIncr'                 /* fixed        */
                ,       'clientContextAutoIncr'                 /* do not touch */
                )
        .where('clientContextAutoIncr', '=', '688')
    .then((rows) => {
        for (row of rows) {
                console.log(JSON.stringify(row));
            //console.log(`${row['clientMasterEmail']} ${row['clientContextError']}`);
        }
    })
    .catch((err) => { console.log( err); throw err })
    .finally(() => {
        //knex.destroy();
        //process.exit();
    });


knex.from('clientStimword')
        .select (       'layoutName'                            /* fixed        */
                ,       'teacherEmail'                          /* fixed        */
                ,       'clientMasterEmail'                     /* fixed        */
                ,       'sessionName'                           /* fixed        */
                ,       'soundPhoneme'                          /* fixed        */
                ,       'contextPosition'                       /* fixed        */
                ,       'clientContextError'                    /* fixed        */
                ,       'stimwordPageNbr'                       /* fixed        */
                ,       'stimwordLineNbr'                       /* fixed        */
                ,       'stimwordWord'                          /* fixed        */
                ,       'stimwordPositionNbr'                   /* fixed        */
                ,       'stimwordPositionSetting'               /* fixed        */
                ,       'clientStimwordNotes'                   /* variable     */
                ,       'createdAt'                             /* do not touch */
                ,       'updatedAt'                             /* do not touch */
                ,       'stimwordPositionAutoIncr'              /* fixed        */
                ,       'clientContextAutoIncr'                 /* fixed        */
                ,       'clientStimwordAutoIncr'                /* do not touch */
                )
        .where('clientContextAutoIncr', '=', '688')
    .then((rows) => {
        for (row of rows) {
                console.log(JSON.stringify(row));
            //console.log(`${row['clientMasterEmail']} ${row['clientContextError']}`);
        }
    })
    .catch((err) => { console.log( err); throw err })
    .finally(() => {
        //knex.destroy();
        process.exit();
    });

/*

    if  ( NEW != <blank> )      {
        if  ( clientContext(NEW) NOT exists )   {
            INSERT clientContext(NEW)
        }
        if  ( OLD == <blank> ) {
            INSERT clientStimword(NEW)
        } else {
            MODIFY clientStimword(OLD) to clientStimword(NEW)
        }
    } else {
        DELETE clientStimword(OLD)
        if      (       clientContext(OLD) have blank notes
                &&      clientContext(OLD) childless?
                )
        {
            DELETE clientContext(OLD)
        }
    }
*/
