codepen backup:

html, body { 
  padding: 10px; 
}

smart-combo-box {
  width: 80px;
}

.wrapper {
  display: grid;
  grid-template-columns:
         25px 25px 25px 25px;
  grid-gap: 2px;
  background-color: #fff;
  color: #444;
}

.box {
  background-color: #444;
  color:  #fff;
  border-radius: 5px;
  padding: 5px;
  font-size: 140%;
}






'use strict'

const maxCharsInPhoneticError = 4;

window.onload = () => {
  
    const myTooltip = document.getElementById('myTooltip') ;

    Object.keys(document.getElementsByTagName("smart-combo-box")).forEach((key) => {
  
       const comboBoxElement = document.getElementsByTagName('smart-combo-box')[key];
    
       comboBoxElement.querySelector('input').setAttribute('maxlength', maxCharsInPhoneticError);

       comboBoxElement.addEventListener
          ('mouseover', (event) => {   
             // const combobox = document.getElementById(element);
              if   ( event.target.tagName == 'INPUT' )  {
                   comboBoxElement.close();
                   myTooltip.selector = comboBoxElement;  
                   comboBoxElement.dataset.oldValue = comboBoxElement.value;   // save for future testing!!
                   myTooltip.open();
              }
          });
     
       comboBoxElement.addEventListener
           ('mouseout', event => {  
               if  ( event.clientY < (event.currentTarget.offsetTop + event.currentTarget.offsetHeight - 2 ) ) 
               { 
                   myTooltip.close();
               }
           });
     
       comboBoxElement.addEventListener
           ('opening', () => { 
                  myTooltip.close();
           });

       comboBoxElement.addEventListener
           ('change', event => {  //debugger;
                if  (!( myTooltip.visible )) {   // ie its CLOSED!
                    processValues ( event.currentTarget.dataset.idNbr
                                  , event.currentTarget.dataset.oldValue
                                  , event.currentTarget.value
                                  );
                    event.currentTarget.dataset.oldValue = event.currentTarget.value;
                } else {
                    console.log('skipping because tooltip is  visible!')
                }
          });    
    });
    
    myTooltip.addEventListener('mouseleave', (event) =>  {
        myTooltip.close();
        let thisSmartComboBox = document.getElementById(myTooltip.selector.id);
        thisSmartComboBox.dataset.oldValue = thisSmartComboBox.value // saved for future testing
        processValues   ( thisSmartComboBox.dataset.idNbr
                        , thisSmartComboBox.dataset.oldValue
                        , thisSmartComboBox.value
                        );
    })

   const tooltipGridItems = document.getElementById('tooltipGrid').getElementsByTagName('*');
   Object.keys(tooltipGridItems).forEach( element =>  { 
       let thisDiv = tooltipGridItems[element];
       thisDiv.classList.add('box');
       thisDiv.style.cursor = "pointer";
       thisDiv.addEventListener('click', event => {
            let clickedValue = event.target.innerHTML;
            let myComboBox = document.getElementById(myTooltip.selector.id);
            if  ( clickedValue != '&nbsp;' )  {
                if ( myComboBox.value.length < maxCharsInPhoneticError ) {
                    myComboBox.value += clickedValue;
                } else {
                    console.log('you filled up the phonetic errors input box!')
                }
            } else {  // delete selected
                myComboBox.value = myComboBox.value.slice(0, -1)  ;
            }
       });
   }); // end Object.keys(descenands).foreach()

} 

function  processValues(id, oldValue, newValue)  {
     console.log('RESULT!! ' + id, 'oldValue:',  (oldValue ? oldValue : 'not yet defined!') , 'newValue: ' , newValue);
}










<br /></br />
<smart-combo-box data-id-nbr="1234"  class='smartComboBox' id='mySmartComboBox1' drop-down-position="bottom" label="first"  selection-mode="zeroOrOne"  incremental-search-mode='equals'>
		<smart-list-item>A∅A</smart-list-item>
		<smart-list-item>BBB</smart-list-item>
</smart-combo-box>
<br /><br /><br /><br />
<smart-combo-box data-id-nbr="5678" class='smartComboBox' id='mySmartComboBox2' drop-down-position="bottom" label="second"  selection-mode="zeroOrOne" incremental-search-mode='equals' >
		<smart-list-item>C∅C</smart-list-item>
		<smart-list-item>BBB</smart-list-item>
</smart-combo-box>

<smart-tooltip id="myTooltip" style='border: 1px dotted red;' open-mode='manual' position='bottom' arrow>
  <div class='wrapper' id='tooltipGrid'>
        <!-- row one  -->
        <div>&nbsp;</div>
        <div>∅</div>
        <div>æ</div>
        <div>ɜ</div>
        <!-- row two -->
        <div>ɚ</div>
        <div>ʌ</div>   
        <div>ɔ</div>
        <div>ɝ</div>
        <!-- row three -->
        <div>ʡ</div>
        <div>═</div>   
        <div>←</div>
        <div>ǝ</div>
        <!--  row four -->
        <div>Ɒ</div>
        <div>ɛ</div>
        <div>ʃ</div>
        <div>ð</div>
        <!--  row five -->
        <div>ŋ</div>
        <div>θ</div>
        <div>ʀ</div>
        <div>ṭ</div>
        <!--  row six -->
        <div>ʊ</div>
        <div>χ</div>
        <div>ʒ</div>
        <div>ɪ</div>
    
    </div>

</smart-tooltip>

    <!-- scripts -->  
 <script type="module" src="../../source/modules/smart.combobox.js">
<script type="module" src="../../source/modules/smart.tooltip.js"></script> 
<script type="module" src="../../source/modules/smart.button.js"></script> 
<script type="module" src="index.js"></script>	
	
